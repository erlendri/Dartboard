@using NDCRegistration
@{
  ViewData["Title"] = "Scoreboard";
}
<div id="myCarousel" class="carousel slide" data-ride="carousel" data-interval="6000">
  <ol class="carousel-indicators">
    <li data-target="#myCarousel" data-slide-to="0" class="active"></li>
    <li data-target="#myCarousel" data-slide-to="1"></li>
    <li data-target="#myCarousel" data-slide-to="2"></li>
  </ol>
  <div class="carousel-inner" role="listbox">
    <div class="item active">
      <img src="~/images/banner1.svg" class="img-responsive" />
      <div class="carousel-caption" role="option">
        <div class="highscore-container-wrapper">
          <div class="highscore-container" data-id="1">
          </div>
          <div class="highscore-container" data-id="2">
          </div>
        </div>
      </div>
    </div>
    <div class="item">
      <img src="~/images/banner2.svg" class="img-responsive" />
      <div class="carousel-caption" role="option">
        <div class="highscore-container-wrapper">
          <div class="highscore-container" data-id="3">
          </div>
          <div class="highscore-container" data-id="4">
          </div>
        </div>
      </div>
    </div>
    <div class="item">
      <img src="~/images/banner3.svg" class="img-responsive" />
      <div class="carousel-caption" role="option">
        <div class="highscore-container-wrapper">
          <div class="highscore-container" data-id="5">
          </div>
          <div class="highscore-container" data-id="6">
          </div>
        </div>
      </div>
    </div>

  </div>
  <a class="left carousel-control" href="#myCarousel" role="button" data-slide="prev">
    <span class="glyphicon glyphicon-chevron-left" aria-hidden="true"></span>
    <span class="sr-only">Previous</span>
  </a>
  <a class="right carousel-control" href="#myCarousel" role="button" data-slide="next">
    <span class="glyphicon glyphicon-chevron-right" aria-hidden="true"></span>
    <span class="sr-only">Next</span>
  </a>
</div>

<h4>Currently playing</h4>
<div style="padding: 5px">
  <input type="button" onclick="hub.SendTestUpdateCurrent();" value="Test Update" />
  <input type="button" onclick="hub.SendTestCompleteCurrent();" value="Test Complete" />
</div>
<div id="player-current" class="section">
</div>
<hr />
<h4>Next up</h4>
<div id="player-next" class="section">
</div>
<template id="player-template">
  <div id="@(Guid.Empty)" class="player">
    <div class="player-name">Player name</div>
    <div class="player-score">1234</div>
    <div class="player-button-delete player-button"><span></span></div>
    <div class="player-button-start player-button"><span></span></div>
  </div>
</template>
<template id="player-highscore-template">
  <div class="player-highscore" data-id="@(Guid.NewGuid())">
    <div class="player-rank">1</div>
    <div class="player-name">Player name</div>
    <div class="player-score">1234</div>
  </div>

</template>
@section Scripts {
  @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}

  <script src="~/lib/signalr/dist/browser/signalr.js"></script>
  <script type="text/javascript">
    var connection = new signalR.HubConnectionBuilder().withUrl("/messageHub").build();

    connection.on("@(SignalRTopics.ScoreUpdate)", function (game) {
      app.UpdatePlayerCurrent(game);
    });
    connection.on("@(SignalRTopics.GameCurrent)", function (game) {
      if (game === undefined || game === null)
        app.ClearPlayerCurrent();
      else
        app.UpdatePlayerCurrent(game);
    });
    connection.on("@(SignalRTopics.GamesPending)", function (games) {
      app.ClearPlayerNext();
      for (var i = 0; i < games.length; i++) {
        app.AddPlayerNext(games[i]);
      }
    });
    connection.on("@(SignalRTopics.GamesCompleted)", function (games) {
      app.SetHighscores(games);
    });

    connection.start().then(function () {
      console.log('Ready to receive SignalR');
      app.Init();
      hub.Sync();
    }).catch(function (err) {
      return console.error(err.toString());
    });

    let hub = {
      Sync: () => {
        hub.GetCurrentGame();
        hub.GetPendingGames();
        hub.GetCompletedGames();
      },
      HelloServer: () => {
        connection.invoke('HelloServer');
      },
      StartGame: (id) => {
        connection.invoke('StartGame', id);
      },
      DeleteGame: (id) => {
        connection.invoke('DeleteGame', id);
      },
      GetPendingGames: () => {
        connection.invoke('GetPendingGames');
      },
      GetCompletedGames: () => {
        connection.invoke('GetCompletedGames');
      },
      GetCurrentGame: () => {
        connection.invoke('GetCurrentGame');
      },
      SendTestUpdateCurrent: () => {
        connection.invoke('TestUpdateCurrent');
      },
      SendTestCompleteCurrent: () => {
        connection.invoke('TestCompleteGame');
      }

    }

  </script>
}
