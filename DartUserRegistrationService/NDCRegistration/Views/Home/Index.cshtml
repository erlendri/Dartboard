@using NDCRegistration
@{
  ViewData["Title"] = "Scoreboard";
}
<div class="highscore-container-wrapper">
  <div class="highscore-container" data-id="1">
    Loading highscores...
  </div>
  <div class="v-spacer"></div>
  <div class="highscore-container" data-id="2">
  </div>
  <div class="v-spacer"></div>
  <div class="highscore-container" data-id="3">
  </div>
</div>

<h4>Currently playing</h4>
@*Remove when going live - start*@
@*<div style="padding: 5px">
  <input type="button" onclick="hub.SendTestDart();" value="Test throw dart" />
  <input type="button" onclick="hub.SendTestScore();" value="Test update score" />
  <input type="button" onclick="hub.SendTestCreate();" value="Create testplayer" />
</div>*@
@*Remove when going live - end*@
<div id="player-current" class="section">
  Getting current player...
</div>
<hr />
<h4>Next up</h4>
<div id="player-next" class="section">
  Getting players up next...
</div>
<template id="player-template">
  <div id="@(Guid.Empty)" class="player">
    <div class="player-name">Player name</div>
    <div class="player-tries hidden">1</div>
    <div class="player-loading"></div>
    <div class="player-score hidden">1234</div>
    <div class="player-button-delete player-button"><span></span></div>
    <div class="player-button-start player-button"><span></span></div>
  </div>
</template>
<template id="player-highscore-template">
  <div class="player-highscore" data-id="@(Guid.NewGuid())">
    <div class="player-rank">1</div>
    <div class="player-name">Player name</div>
    <div class="player-score">1234</div>
  </div>

</template>
@section Scripts {
  @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}

  <script src="~/lib/signalr/dist/browser/signalr.js"></script>
  <script type="text/javascript">
    var connection = new signalR.HubConnectionBuilder().withUrl("/messageHub").build();

    connection.on("@(SignalRTopics.ScoreUpdate)", function (game) {
      app.UpdatePlayerCurrent(game);
    });
    connection.on("@(SignalRTopics.GameCurrent)", function (game) {
      if (game === undefined || game === null)
        app.ClearPlayerCurrent();
      else
        app.UpdatePlayerCurrent(game);
    });
    connection.on("@(SignalRTopics.GamesPending)", function (games) {
      app.ClearPlayerNext();
      for (var i = 0; i < games.length; i++) {
        app.AddPlayerNext(games[i]);
      }
    });
    connection.on("@(SignalRTopics.GamesCompleted)", function (games) {
      app.SetHighscores(games);
    });

    connection.start().then(function () {
      console.log('Ready to receive SignalR');
      app.Init();
      hub.Sync();
    }).catch(function (err) {
      return console.error(err.toString());
    });

    let hub = {
      Sync: () => {
        hub.GetCurrentGame();
        hub.GetPendingGames();
        hub.GetCompletedGames();
      },
      HelloServer: () => {
        connection.invoke('HelloServer');
      },
      StartGame: (id) => {
        connection.invoke('StartGame', id);
      },
      DeleteGame: (id) => {
        connection.invoke('DeleteGame', id);
      },
      GetPendingGames: () => {
        connection.invoke('GetPendingGames');
      },
      GetCompletedGames: () => {
        connection.invoke('GetCompletedGames');
      },
      GetCurrentGame: () => {
        connection.invoke('GetCurrentGame');
      },
      SendTestDart: () => {
        connection.invoke('TestThrowDart');
      },
      SendTestScore: () => {
        connection.invoke('TestUpdateScore');
      },
      SendTestCreate: () => {
        connection.invoke('QueueRandomPlayer');
      }

    }

  </script>
}
