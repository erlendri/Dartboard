@using Microsoft.Ajax.Utilities
@model Dart.Web.Models.HomeModel
<div class="jumbotron">
    <h1>Teleplan Globe dart scoreboard</h1>
    <br/>
    <p class="lead">Current gamer:</p>
    @if (@Model.CurrentGamer != null)
    {
        @Html.Partial("~/Views/Gamer/Index.cshtml", Model.CurrentGamer)
    }


    <p id="simulateNewPlayer" style="display: none;"><a class="btn btn-primary btn-lg">Simulate new player &raquo;</a></p>
    @*<p id="simulateExistingPlayer"><a class="btn btn-primary btn-lg">Simulate existing player &raquo;</a></p>*@
    <p id="simulateThrow"><a class="btn btn-primary btn-lg">Simulate throw &raquo;</a></p>

    <p>
        <div id="newPlayer" style="display: none;">
            <div>
                <input id="newPlayerEmail" placeholder="Email" type="email" required />
                <input id="newPlayerFirstName" placeholder="First name" type="text" pattern=".{3,}" required />
                <input id="newPlayerNick" placeholder="Display name" type="text" pattern=".{3,}" required />
                <input id="newPlayerLastName" placeholder="Last name" type="text" pattern=".{3,}" required />
                <a id="register" class="btn btn-primary btn-lg" style="display: none;">Register&raquo;</a>
            </div>
        </div>
    </p>

    <div id="qrCodeReader" style="width:300px;height:250px"></div>
    <div id="qrCodeReaderReadSuccess"></div>
    <div id="qrCodeReaderReadError" style="display: none!important"></div>
    <div id="qrCodeReaderVideoError"></div>


</div>
<div>
    <h3>Ultimate dart gamer hall of fame:</h3>
    <ul id="score">
        @foreach (var person in Model.Gamers)
        {
            @Html.Partial("~/Views/Gamer/Index.cshtml", person);
        }
    </ul>

</div>
@section scripts {
    <!--Script references. -->
    <!--The jQuery library is required and is referenced by default in _Layout.cshtml. -->
    <!--Reference the SignalR library. -->
    <script src="~/Scripts/jquery.signalR-2.2.2.min.js"></script>
    <script src="~/Scripts/jsqrcode-combined.min.js"></script>
    <script src="~/Scripts/html5-qrcode.min.js"></script>
    <!--Reference the autogenerated SignalR hub script. -->
    <script src="~/signalr/hubs"></script>
    <!--SignalR script to update the score page and send messages.-->
    <script>
        $(function () {
            // Reference the auto-generated proxy for the hub.
            var sh = $.connection.scoreHub;
            var currentGamer = null;

            // Create a function that the hub can call back to display messages.
            sh.client.refresh = function () {
                location.reload();
            };
            var doRegister = function (qrString) {
                sh.server.addPlayerFromQr(qrString)
                    .done(function (result) {
                        if (result.Email == null) {
                            currentGamer = result;
                            $('#newPlayer').show();
                        }
                    });
            };
            // Start the connection.
            $.connection.hub.start().done(function () {
                //sh.server.hello();
                $('#simulateNewPlayer').click(function () {
                    doRegister("TestString");
                });
                //$('#simulateExistingPlayer').click(function () {
                //    // Call the Send method on the hub.
                //    sh.server.send('test', 'test');
                //    sh.server.simulateExistingPlayer();
                //});
                $('#register').click(function() {
                    sh.server.addPlayer(currentGamer);
                })
                $('#simulateThrow').click(function () {
                    // Call the Send method on the hub.
                    sh.server.simulateThrow();
                });
                $('.container').delegate('div.gameremove',
                    'click',
                    function () {
                        sh.server.deleteGame($(this).data('gameid'));
                    });
                $('#qrCodeReader').html5_qrcode(
                    function (data) {
                        doRegister(data);
                    },
                    function (error) {
                        $('#qrCodeReaderReadError').html(error.message);
                    },
                    function (videoError) {
                        $('#qrCodeReaderVideoError').html(videoError.message);
                    }
                );

                var validFields = {
                    Email: false,
                    FirstName: false,
                    DisplayName: false,
                    LastName: false,
                    AllValid: function () {
                        return this.Email && this.FirstName && this.DisplayName && this.LastName;
                    }
                };
                var toggleState = function () {
                    if (validFields.AllValid()) {
                        $('#register').show();
                    } else
                        $('#register').hide();
                }
                var setValidClass = function (node, isValid) {
                    if (isValid)
                        $(node).removeClass('hasError');
                    else
                        $(node).addClass('hasError');
                }

                $('#newPlayerEmail').on('keyup',
                    function (val, arg) {
                        if (val.currentTarget.validity.valid)
                            currentGamer.Email = val.currentTarget.value;
                        validFields.Email = val.currentTarget.validity.valid;
                        setValidClass(val.currentTarget, val.currentTarget.validity.valid);
                        toggleState();

                    });
                $('#newPlayerFirstName').on('keyup',
                    function (val, arg) {
                        if (val.currentTarget.validity.valid)
                            currentGamer.FirstName = val.currentTarget.value;
                        validFields.FirstName = val.currentTarget.validity.valid;
                        setValidClass(val.currentTarget, val.currentTarget.validity.valid);
                        toggleState();
                    });
                $('#newPlayerNick').on('keyup',
                    function (val, arg) {
                        if (val.currentTarget.validity.valid)
                            currentGamer.DisplayName = val.currentTarget.value;
                        validFields.DisplayName = val.currentTarget.validity.valid;
                        setValidClass(val.currentTarget, val.currentTarget.validity.valid);
                        toggleState();
                    });
                $('#newPlayerLastName').on('keyup',
                    function (val, arg) {
                        if (val.currentTarget.validity.valid)
                            currentGamer.LastName = val.currentTarget.value;
                        validFields.LastName = val.currentTarget.validity.valid;
                        setValidClass(val.currentTarget, val.currentTarget.validity.valid);
                        toggleState();
                    });

            });
        });

        // This optional function html-encodes messages for display in the page.
        function htmlEncode(value) {
            var encodedValue = $('<div />').text(value).html();
            return encodedValue;
        }
    </script>
}